//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/DownHill/InputAction/SimplePlayerControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @SimplePlayerControl: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @SimplePlayerControl()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""SimplePlayerControl"",
    ""maps"": [
        {
            ""name"": ""GameplayControl"",
            ""id"": ""29601cec-f7f4-41cf-9d02-78641df79fbe"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""7a0bd8ba-45d8-4e92-9439-656cf7b61c82"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Gas"",
                    ""type"": ""Value"",
                    ""id"": ""81c5b05e-1d87-41b7-93dc-0f02b1170b5e"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Break"",
                    ""type"": ""Value"",
                    ""id"": ""ff42b84f-c7c7-4db7-91a6-2516da4a5251"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Handbreak"",
                    ""type"": ""Value"",
                    ""id"": ""bf64fc67-72b0-4750-945f-cd6015d6f83e"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""d91b1e18-3629-4ac5-9562-4b22c88b4eea"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8b5b9444-5a91-491c-b1f8-eb73036033fb"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""53a535c9-6895-4650-b06d-71d3b12a6954"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c043f542-71b7-473e-8eae-eef242f8bc04"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""3508f7a2-d24f-4cf7-94e8-21275aae77c7"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""7f37613c-588b-4665-ad9a-9e7ac9d7c0d3"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""37b40320-fe06-4f49-813a-4b02571df447"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""4267f65e-2ea4-4682-9864-f8056120a454"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Gas"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1f4a1151-3afc-4536-813e-f97a6914dcd7"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Gas"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a485382b-7c81-4566-a4d5-171d0c122db7"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Break"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""53d051c6-ac67-43e8-ac8a-b31d0f7b4c42"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Break"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c51d9ede-799c-4f1c-8476-7e8aabb92d17"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Handbreak"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a7f6104b-8767-4dcb-9d1e-0c2cf09b2872"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Handbreak"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0d26c789-b718-4dac-99f8-f0cb4bac36ac"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8bfa1409-f1de-4210-ad70-65b09b3b5ec3"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e5791032-7d66-4b1a-8277-3b5d0664d56b"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GameplayControl
        m_GameplayControl = asset.FindActionMap("GameplayControl", throwIfNotFound: true);
        m_GameplayControl_Move = m_GameplayControl.FindAction("Move", throwIfNotFound: true);
        m_GameplayControl_Gas = m_GameplayControl.FindAction("Gas", throwIfNotFound: true);
        m_GameplayControl_Break = m_GameplayControl.FindAction("Break", throwIfNotFound: true);
        m_GameplayControl_Handbreak = m_GameplayControl.FindAction("Handbreak", throwIfNotFound: true);
        m_GameplayControl_Pause = m_GameplayControl.FindAction("Pause", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GameplayControl
    private readonly InputActionMap m_GameplayControl;
    private List<IGameplayControlActions> m_GameplayControlActionsCallbackInterfaces = new List<IGameplayControlActions>();
    private readonly InputAction m_GameplayControl_Move;
    private readonly InputAction m_GameplayControl_Gas;
    private readonly InputAction m_GameplayControl_Break;
    private readonly InputAction m_GameplayControl_Handbreak;
    private readonly InputAction m_GameplayControl_Pause;
    public struct GameplayControlActions
    {
        private @SimplePlayerControl m_Wrapper;
        public GameplayControlActions(@SimplePlayerControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_GameplayControl_Move;
        public InputAction @Gas => m_Wrapper.m_GameplayControl_Gas;
        public InputAction @Break => m_Wrapper.m_GameplayControl_Break;
        public InputAction @Handbreak => m_Wrapper.m_GameplayControl_Handbreak;
        public InputAction @Pause => m_Wrapper.m_GameplayControl_Pause;
        public InputActionMap Get() { return m_Wrapper.m_GameplayControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayControlActions set) { return set.Get(); }
        public void AddCallbacks(IGameplayControlActions instance)
        {
            if (instance == null || m_Wrapper.m_GameplayControlActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameplayControlActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Gas.started += instance.OnGas;
            @Gas.performed += instance.OnGas;
            @Gas.canceled += instance.OnGas;
            @Break.started += instance.OnBreak;
            @Break.performed += instance.OnBreak;
            @Break.canceled += instance.OnBreak;
            @Handbreak.started += instance.OnHandbreak;
            @Handbreak.performed += instance.OnHandbreak;
            @Handbreak.canceled += instance.OnHandbreak;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
        }

        private void UnregisterCallbacks(IGameplayControlActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Gas.started -= instance.OnGas;
            @Gas.performed -= instance.OnGas;
            @Gas.canceled -= instance.OnGas;
            @Break.started -= instance.OnBreak;
            @Break.performed -= instance.OnBreak;
            @Break.canceled -= instance.OnBreak;
            @Handbreak.started -= instance.OnHandbreak;
            @Handbreak.performed -= instance.OnHandbreak;
            @Handbreak.canceled -= instance.OnHandbreak;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
        }

        public void RemoveCallbacks(IGameplayControlActions instance)
        {
            if (m_Wrapper.m_GameplayControlActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplayControlActions instance)
        {
            foreach (var item in m_Wrapper.m_GameplayControlActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameplayControlActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameplayControlActions @GameplayControl => new GameplayControlActions(this);
    public interface IGameplayControlActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnGas(InputAction.CallbackContext context);
        void OnBreak(InputAction.CallbackContext context);
        void OnHandbreak(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
    }
}
